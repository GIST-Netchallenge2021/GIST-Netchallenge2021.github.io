---
layout: post
title:  "21.07.03(Sat)"
subtitle:
categories: til
tags:
comments: true
header-img: 
---
# 효인
### 목표
- threejs
   - https://threejsfundamentals.org/threejs/lessons/kr/threejs-game.html 훑어보기, 학습범위 설정
   - 타 이용자와 interaction 예제 찾아보기
- reactjs
    - 기본 문법 학습(공식 문서)
- javascript
    - CSS in javascript, login process
  
준희
=================
### 목표
- React 생활코딩 전체
  - https://www.inflearn.com/course/(9강~40강)
  - 코어 자바스크립트 ~93페이지
  
### 달성현황
# React 배우기

npx : 일회용(한 번 만들고 삭제함)  npm : 다운로드 후 계속 사용

npm run start : 샘플 웹앱 실행

npm run build : 빌드하기

npx serve -s build : 배포


![jsx라는 언어를 쓴다. JS로 바뀌어서 빌드된다.](https://gist-netchallenge2021.github.io/assets/img/til/junhee/1.png )  
jsx라는 언어를 쓴다. JS로 바뀌어서 빌드된다.

![component 생성을 위한 import 과정](https://gist-netchallenge2021.github.io/assets/img/til/junhee/2.png )  
component 생성을 위한 import 과정

![component 기본적인 문법](https://gist-netchallenge2021.github.io/assets/img/til/junhee/3.png)  
component 기본적인 문법

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/4.png)  
생성한 컴포넌트를 사용한 모습 (Subject Tag는 사용자가 생성한 컴포넌트이다.)

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/5.png)  
컴포넌트의 props를 이용해 내용을 자유자재로 바꾸는 모습

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/6.png)  
위의 props를 받아와 내용을 채운다.

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/7.png)  
components 디렉토리에 컴포넌트들을 따로 정리하고 이를 App.js로 불러오는 부분.

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/8.png)  
component들을 클래스처럼 따로따로 component에 보관한다. export default 잊지말자.

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/9.png)  
App 컴포넌트에 state를 따로 만들어놓고 props로 불러오는 모습

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/10.png)  
![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/11.png)
state 변경할 때는 꼭 setState 함수를 사용하자.

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/12.png)

함수에서 this는 아무의미를 지니지 않는다. 따라서 함수 끝에 .bind(객체)를 해줌으로서 this가 객체를 뜻하게 만들어준다.

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/13.png)

key 값을 할당해줘야 error가 안난다.

![](https://gist-netchallenge2021.github.io/assets/img/til/junhee/14.png)
  
# 세연

### 목표
  - [스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술] 강의 완강하기

### spring에서의 TEST
테스트 메소드의 실행 순서는 일반적으로 보장하지 않는다. (사용자가 어떤 메소드를 먼저 실행할지 정해져 있지 않으므로 무작위 순서로 테스트를 돌렸을 때도 정상 작동해야 하기 때문이다.) 
- **TDD (TEST 주도 개발)** 
  - 실무에서는 각 메소드마다 테스트 메소드를 만들어 각 기능들이 정상 동작하는지 체크하는 것이 필수적이다.
TDD는 구현체를 만든 후, 잘 구현이 되었는지 확인하기 위해 테스트 메소드를 만드는 것이 아니라,  
반대로, 테스트 메소드를 먼저 작성한 뒤, 이 테스트 메소드를 통과하는 구현체를 만드는 방식의 개발이다.

- **@AfterEach** : 각 테스트 메소드들이 끝날 때 마다 실행할 필요가 있는 테스트 메소드 앞에 붙여준다. (ex)다른 테스트 메소드에 의해 사용된 메모리 DB를 초기화 해주기 위해 사용)
- **@BeforeEach** : 각 테스트 메소드들을 실행하기 전에 먼저 실행할 필요가 있는 테스트 메소드 앞에 붙여준다. (ex)의존성 주입(**DI**))  

### 의존관계

스프링은 스프링 빈을 통해 연관된 객체 간의 의존관계를 주입해준다.   
주입된 빈은 스프링 컨테이너에 등록된다. 스프링은 기본적으로 싱글톤으로 스프링 빈을 스프링 컨테이너에 등록한다.  
**싱글톤** : 한 클래스에 대한 스프링 빈을 하나만 등록해서 그것을 여러 곳에서 공유한다. 즉 같은 스프링 빈이면 모두 같은 인스턴스이다.

- 컴포넌트 스캔과 자동 의존관계 설정
  - **@Controller ,@Service, @Repository** : 해당 클래스를 스프링 빈으로 스프링 컨테이너에 등록해준다. (@Component가 안에 포함된 어노테이션들이다)  
  - **@AutoWired** : 이 어노테이션을 붙이면 스프링이 연관된 객체(스프링 빈)를 스프링컨테이너에서 찾아서 넣어준다. 즉 의존성을 자동으로 주입해준다.
- 자바 코드로 직접 스프링 빈 등록
  - **@Configuration** : 직접 등록할 스프링 빈들이 들어있는 클래스에 앞에 붙여준다.
  - **@Bean** : 직접 스프링 빈으로 등록할 객체를 리턴하는 메소드 앞에 붙여준다.
> - DI에는 필드 주입, setter 주입, 생성자 주입 이렇게 3가지 방법이 있다. 의존관계가 실행중에
동적으로 변하는 경우는 거의 없으므로 생성자 주입을 권장한다.  
> - 실무에서는 주로 정형화된 컨트롤러, 서비스, 리포지토리 같은 코드는 컴포넌트 스캔을 사용한다.
그리고 정형화 되지 않거나, 상황에 따라 구현 클래스를 변경해야 하면 설정을 통해 스프링 빈으로
등록한다.  
> - @Autowired 를 통한 DI는 helloConroller , memberService 등과 같이 스프링이 관리하는
객체에서만 동작한다. 스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작하지 않는다.  
> [출처] 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 (김영한)

